using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ap25
{
    class Program
    {
        static void Main(string[] args)
        {
            Auto auto1 = new Auto("FIAT", 1999);
            Auto auto2 = new Auto("MERCEDES", 1995);
            Auto auto3 = new Auto("BMW", 2000);
            Auto auto4 = new Auto("FIAT", 1989);
            Auto auto5 = new Auto("SKODA", 2015);
            List<Auto> list = new List<Auto>();
            list.Add(auto1);
            list.Add(auto2);
            list.Add(auto3);
            list.Add(auto4);
            list.Add(auto5);

            //list.Sort();
            list.Sort(new AutoComparer()); // dzięki tej klasie odwracamy kolejność

            foreach (var item in list)
            {
                Console.WriteLine(item.Rocznik + " - " + item.Model);
            }

            Console.ReadKey();
        }
    }

    class AutoComparer : IComparer<Auto> //jeżeli chcemy więcej sposobów do porównywania
    {
        public int Compare(Auto x, Auto y)
        {
            if (x.Rocznik > y.Rocznik) // tutaj dzięi tej nowej klasie możemy zmieniać wartunki i naprzykład wyświetlać w odwrotnej kolejności
                return 1;
            else if (x.Rocznik == y.Rocznik)
                return 0;
            else
                return -1;
        }
    }



    class Auto : IComparable //próbując list.Sort() wyrzuciło nam błąd o nazwie IComparable - wpisujemy go tu i ctrl kropka
    {
        public string Model { get; set; }
        public int Rocznik { get; set; }
        public Auto(string Model, int Rocznik)
        {
            this.Model = Model;
            this.Rocznik = Rocznik;
        }

        public int CompareTo(object obj) //musi zwracać 3 przedziały wartości
        {
            var arg = (Auto)obj;

            if (Rocznik < arg.Rocznik)
                return 1;
            else if (Rocznik == arg.Rocznik)
                return 0;
            else
                return -1;
            // sprawdzamy czy rocznik wewnątrz klasy (ten przy get;set) jest mniejszy od tego który przyszedł
            //( jeżeli to co przychodzi jest większe, to dostaje 1 i jest ustawiane wyżej - dzięki temu możemy posortować
        }
    }

}
